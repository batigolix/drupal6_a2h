<?php

/**
 * @file
 * This module will add an "Images" tab to nodes, allowing users to upload images and associate them with the current node.
 */

/**
 * Implementation of hook_help().
 */
function node_images_help($path, $arg) {
  switch ($path) {
    case 'node/%/images':
      $node = node_load($arg[1]);
      if (_node_images_is_translation_source($node)) {
        $output = t('This page allows you to manage node images.');
      }
      else {
        $output = t('This page allows you to view node images.');
        if (_node_images_access('create', $node)) {
          $output .= ' '.t('You can upload new images or edit current images by switching to the default language.');
        }
      }
      if (module_exists('i18nstrings')) {
        $output .= ' '.t('Image descriptions can be translated using the localization interface.');
      }
      else {
        $output .= ' '.t('Image descriptions can be translated using the localization interface and the i18nstrings module (available in the <a href="@i18n">Internationalization</a> package).', array('@i18n' => url('http://drupal.org/project/i18n')));
      }
      $output = '<p>'.$output.'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function node_images_perm() {
  $perms = array('administer node images', 'edit own node images', 'edit any node image', 'delete own node images', 'delete any node image');

  foreach (node_get_types() as $type) {
    $name = strtolower(check_plain($type->type));
    $perms[] = 'add node images to own '. $name .' content';
    $perms[] = 'add node images to any '. $name .' content';
  }

  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function node_images_menu() {
  $items = array();

  $items['node_images/js'] = array(
    'page callback' => '_node_images_js',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'node_images.pages.inc',
  );
  $items['admin/settings/node_images'] = array(
    'title' => 'Node images',
    'description' => 'Control how to upload node images.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_images_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'node_images.admin.inc',
  );
  $items['node/%node/images'] = array(
    'title' => 'Images',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_node_images_edit_page', 1),
    'access callback' => '_node_images_access',
    'access arguments' => array('create', 1),
    'weight' => 2,
    'file' => 'node_images.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/image_gallery'] = array(
    'title' => 'Gallery',
    'page callback' => '_node_images_gallery',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'file' => 'node_images.pages.inc',
    'type' => MENU_CALLBACK,
  );  

  return $items;
}

/**
 * implementation of hook_form_alter()
 */
function node_images_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
      $type = $form['#node_type']->type;
    // radio button in the node's content type configuration page
    _node_images_check_settings();
    $form['node_images'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node images'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['node_images']['node_images_position'] = array(
      '#type' => 'radios',
      '#title' => t('Position'),
      '#default_value' => variable_get('node_images_position_'.$type, 'hide'),
      '#options' => array('hide' => t('Do not show'), 'above' => t('Show above node body'), 'below' => t('Show below node body'), 
	 'node_template' => t('Manually set in node template by variable $node->node_images')),
      '#description' => t('The position of images in the node view.'),
    );
    $form['node_images']['node_images_gallery_link'] = array(
      '#type' => 'radios',
      '#title' => t('Link to image gallery'),
      '#default_value' => variable_get('node_images_gallery_link_'.$type, TRUE),
      '#options' => array(t('Do not show'), t('Show')),
      '#description' => t('Choose whether to show or not the link to the image gallery.'),
    );
    $form['node_images']['node_images_teaser_images'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of images in node teaser'),
      '#default_value' => variable_get('node_images_teaser_images_'.$type, 2),
      '#size' => 5,
      '#maxlength' => 2,
      '#description' => t('The maximum number of images to show in the node teaser. 0 will not show images. Leave blank to show all images.'),
    );
    $form['node_images']['node_images_body_images'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of images in node body'),
      '#size' => 5,
      '#maxlength' => 2,
      '#default_value' => variable_get('node_images_body_images_'.$type, NULL),
      '#description' => t('The maximum number of images to show in the node body. 0 will not show images. Leave blank to show all images.'),
    );
    $form['node_images']['node_images_teaser_format'] = array(
      '#type' => 'radios',
      '#title' => t('Image format in node teaser'),
      '#default_value' => variable_get('node_images_teaser_format_'.$type, 'thumbs'),
      '#options' => array('thumbs' => t('Thumbnails'), 'fullsize' => t('Full size images')),
      '#description' => t('Image format in node teaser.'),
    );
    $form['node_images']['node_images_body_format'] = array(
      '#type' => 'radios',
      '#title' => t('Image format in node body'),
      '#default_value' => variable_get('node_images_body_format_'.$type, 'thumbs'),
      '#options' => array('thumbs' => t('Thumbnails'), 'fullsize' => t('Full size images')),
      '#description' => t('Image format in node body.'),
    );
  }
  
  if (isset($form['type']) && isset($form['#node'])) {
    $node = $form['#node'];
    if (!isset($node->nid) && $form['type']['#value'] .'_node_form' == $form_id && _node_images_access('create', $node)) {
      // Attachments fieldset
      $form['node_images'] = array(
        '#type' => 'fieldset',
        '#title' => t('Node images'),
        '#collapsible' => TRUE,
        '#collapsed' => empty($node->node_images),
        '#description' => t('Changes made to the node images are not permanent until you save this post.'),
        '#weight' => 30,
      );

      require_once(drupal_get_path('module', 'node_images').'/node_images.pages.inc');
      $form = _node_images_edit_page($form_state, $node, $form);
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function node_images_nodeapi(&$node, $op, $teaser, $page) {
  // test if images are allowed for this node
  if ($op == 'load' || $op == 'view') {
    if (variable_get('node_images_position_'.$node->type, 'hide') == 'hide') return;
    // fire an additional hook for the specific node type
    // i.e. node images might be a pro feature, so only subscribed users can view them
    // if the hook is not present in the node type module, images are loaded by default
    $show = module_invoke($node->type, 'node_images', $op, $node);
    if ($show === FALSE) return;
  }

  switch ($op) {
    case 'insert':
      if (_node_images_access('create', $node)) {
        _node_images_save_attachments($node);
        if (variable_get('node_images_position_'.$node->type, 'hide') != 'hide') {
          drupal_set_message(t('Click the <strong>!images</strong> tab to edit node images.',
            array('!images' => l(t('Images'), 'node/'.$node->nid.'/images'))));
	      }
      }
      break;

    case 'delete':
      // Delete image and thumbnail files
      $sql = db_query('SELECT id, filepath, thumbpath FROM {node_images} WHERE nid=%d', $node->nid);
      while ($r = db_fetch_object($sql)) {
        file_delete($r->filepath);
	      file_delete($r->thumbpath);
	      module_invoke('i18nstrings', 'remove_string', _node_images_build_i18nstrings_context($r));
      }
      // Delete all images associated with the node
      db_query('DELETE FROM {node_images} WHERE nid=%d', $node->nid);
      break;

    case 'prepare':
      // Initialize $_SESSION['node_images'] if no post occurred.
      // This clears the variable from old forms and makes sure it
      // is an array to prevent notices and errors in other parts
      // of node_images.module.
      if (!$_POST) {
        $_SESSION['node_images'] = array();
      }
      break;

    case 'view':
      $node->node_images = node_images_load($node, $teaser, $page);
      if (empty($node->node_images)) return;

      // search for a themed view for the current node type
      $nodetype_function = 'theme_'.$node->type.'_node_images_view';
      if (function_exists($nodetype_function)) {
        $output = $nodetype_function($node, $teaser, $page);
      }
      else {
        // use the default theme function
        $output = theme('node_images_view', $node, $teaser, $page);
      }
      $node->node_images = $output;

      $output = '<div class="node_images">'.$output.'</div>';
      $position = variable_get('node_images_position_'.$node->type, 'hide');
      switch ($position) {
        case 'node_template':
	      case 'hide':
          break;

	      case 'above':
          $node->content['node_images'] = array('#value' => $output, '#weight' => -1);
          break;

        default:
          $node->content['node_images'] = array('#value' => $output, '#weight' => 1);
          break;
      }
      return $node;
  }
}

/**
 * Implementation of hook_theme()
 */
function node_images_theme() {
  return array(
    'node_images_form_list' => array(
      'arguments' => array('form' => NULL),
    ),
    'node_images_form_upload' => array(
      'arguments' => array('form' => NULL),
    ),
    'node_images_attach_list' => array(
      'arguments' => array('form' => NULL),
    ),
    'node_images_view' => array(
      'arguments' => array('node' => NULL, 'teaser' => NULL, 'page' => NULL),
    ),
    'node_images_gallery' => array(
      'arguments' => array('element' => NULL),
    ),
    'node_images_gallery_thumbs' => array(
      'arguments' => array('thumbs' => NULL, 'cols' => 2),
     ),
  );
}

/**
 * Implementation of hook_link().
 */
function node_images_link($type, $node = null, $teaser = false) {
  $links = array();

  if ($type == 'node' && $node->nid && variable_get('node_images_position_'.$node->type, 'hide') != 'hide') {
    if (node_access('update', $node) && user_access('create node images')) {
      $links['node_images_edit'] = array(
        'title' => t('Edit node images'),
        'href' => "node/$node->nid/images",
      );
    }
    if (count($node->node_images) && variable_get('node_images_gallery_link_'.$node->type, TRUE)) {
      $links['node_images_gallery'] = array(
        'title' => t('Open the image gallery'),
        'href' => "node/$node->nid/image_gallery",
      );
    }
  }

  return $links;
}

/**
 * Implementation of hook_user().
 */
function node_images_user($type, &$edit, &$user, $category = NULL) {
  switch ($type) {
    case 'delete':
      // Set uid=0 for images uploaded by the deleted user
      db_query('UPDATE {node_images} SET uid=0 WHERE uid=%d', $user->uid);
  }
}

/**
 * Implementation of hook_file_download().
 * Find out if an image is accessible when download method is set to private
 */
function node_images_file_download($file) {
  $path = file_create_path($file);
  $result = db_query("SELECT * FROM {node_images} WHERE filepath='%s' OR thumbpath='%s'", $path, $path);
  if ($file = db_fetch_object($result)) {
    $node = node_load($file->nid);
    if (node_access('view', $node)) {
      if ($path == $file->thumbpath) {
        // update header info if thumb is requested
        $name = mime_header_encode(basename($file->thumbpath));
        $size = $file->thumbsize;
      }
      else {
	      $name = mime_header_encode($file->filename);
	      $size = $file->filesize;
      }
      $type = mime_header_encode($file->filemime);
      return array(
        'Content-Type: '. $type .'; name='. $name,
        'Content-Length: '. $size,
        'Cache-Control: private'
      );
    }
    else {
      return -1;
    }
  }
}

/**
 * Implementation of hook_locale().
 */
function node_images_locale($op = 'groups', $group = NULL) {
  switch ($op) {
    case 'groups':
      return array('node_images' => t('Node images'));
  }
}


/************************************************************
 * Upload functions
 ************************************************************/

function _node_images_attach_form($form_state, $node) {
  global $user;

  $form = array(
    '#cache' => TRUE,
  );
  $form['node_images'] = _node_images_attach_list($node);

  if (_node_images_access('create', $node)) {
    $limits = _node_images_file_limits($user);
    $form['node_images_file'] = array(
      '#type' => 'file',
      '#title' => t('Attach new image'),
      '#size' => 40,
      '#description' => ($limits['resolution'] ? t('Images larger than %resolution will be resized. ', array('%resolution' => $limits['resolution'])) : '') . t('The maximum upload size is %filesize. Only files with the following extensions may be uploaded: %extensions. ', array('%extensions' => $limits['extensions'], '%filesize' => format_size($limits['file_size']))),
      '#weight' => 30,
    );
    $form['node_images_attach'] = array(
      '#type' => 'submit',
      '#value' => t('Attach'),
      '#name' => 'attach',
      '#ahah' => array(
        'path' => 'node_images/js',
        'wrapper' => 'node_images-attach-wrapper',
        'progress' => array('type' => 'bar', 'message' => t('Please wait...')),
      ),
      '#submit' => array('node_form_submit_build_node'),
      '#weight' => 31,
    );
  }

  return $form;
}

function _node_images_attach_list($node) {
  $form = array(
    '#theme' => 'node_images_attach_list',
    '#tree' => TRUE,
  );

  if (!empty($node->node_images) && is_array($node->node_images)) {
    $delta = max(count($node->node_images), 10);
    foreach ($node->node_images as $key => $file) {
      $file = (object)$file;
      $thumb = file_create_url($file->filepath);
      $row = array();
      $row['fid'] = array('#type' => 'value',  '#value' => $file->fid);
      $row['filepath'] = array('#type' => 'value',  '#value' => $file->filepath);
      $row['delete'] = array('#type' => 'checkbox');
      $row['list'] = array('#type' => 'checkbox', '#default_value' => $file->list);
      $row['thumbnail'] = array('#value' => '<img src="'.$thumb.'" width="75" alt="" />');
      $row['description'] = array('#type' => 'textfield', '#default_value' => $file->description, '#maxlength' => 255, '#size' => 40);
      $row['filename'] = array('#type' => 'value',  '#value' => $file->filename);
      $row['filemime'] = array('#type' => 'value',  '#value' => $file->filemime);
      $row['filesize'] = array('#value' => format_size($file->filesize));
      $row['weight'] = array('#type' => 'weight', '#delta' => $delta, '#default_value' => $file->weight);
      $form[$key] = $row;
    }
  }
  return $form;
}

/**
 * Save the current uploaded file.
 *
 * @return
 *   An object containing the file information, or FALSE in the event of an error.
 */
function _node_images_file_upload($form, &$form_state, $node = NULL) {
  global $user;

  $source = 'node_images_file';  
  if (!$_FILES['files']['name'][$source]) return;

  // Error handling in file.inc doesn't work if temp file is not created
  if (!is_uploaded_file($_FILES['files']['tmp_name'][$source])) {
    drupal_set_message(t('File upload error.'), 'error');
    return FALSE;
  }

  $limits = _node_images_file_limits($user);
  $validators = array(
    'file_validate_is_image' => array(),
    'file_validate_image_resolution' => array($limits['resolution']),
    'file_validate_size' => array($limits['file_size']),
    '_node_images_file_validate_name' => array(),
  );

  // Save new file upload.
  $dest = ($node ? _node_images_get_directory('', $user, $node) : file_directory_path());
  if ($file = file_save_upload($source, $validators, $dest)) {
    // remove uploaded file from the files table, so it won't be deleted by system_cron()
    db_query('DELETE FROM {files} WHERE fid = %d', $file->fid);
      
    return $file;
  }
    
  return FALSE;
}

/**
 * Save new uploads and store them in the session to be associated to the node
 * on _node_images_save_attachments.
 *
 * @param $node
 *   A node object to associate with uploaded images.
 */
function node_images_node_form_submit($form, &$form_state, $node = NULL) {
  global $user;

  // Save new file upload.
  $file = _node_images_file_upload($form, $form_state);
  if (!$file) return;
  
  $file->weight = 0;
  $file->list = 1;
  $parts = pathinfo($file->filename);
  $file->description = (isset($parts['filename']) ? $parts['filename'] : substr($file->filename, 0, strrpos($file->filename, '.')));

  $_SESSION['node_images'][$file->fid] = $file;

  // Attach session files to node.
  if (!empty($_SESSION['node_images'])) {
    foreach ($_SESSION['node_images'] as $fid => $file) {
      if (!isset($form_state['values']['node_images'][$fid]['filepath'])) {
        $form_state['values']['node_images'][$fid] = (array)$file;
      }
    }
  }

  // Order the form according to the set file weight values.
  if (!empty($form_state['values']['node_images'])) {
    $microweight = 0.001;
    foreach ($form_state['values']['node_images'] as $fid => $file) {
      if (is_numeric($fid)) {
        $form_state['values']['node_images'][$fid]['#weight'] = $file['weight'] + $microweight;
        $microweight += 0.001;
      }
    }
    uasort($form_state['values']['node_images'], 'element_sort');
  }
}

function _node_images_save_attachments(&$node) {
  global $user;

  if (empty($node->node_images) || !is_array($node->node_images)) {
    return;
  }

  $result = _node_images_check_directory(NULL, $user, $node);
  if (!$result) return FALSE;
  $dest = _node_images_get_directory('', $user, $node);
  
  foreach ($node->node_images as $fid => $file) {
    // Convert file to object for compatibility
    $file = (object)$file;
    if (!$file->delete) {
      $result = file_move($file->filepath, $dest);
      if (!$result) {
        drupal_set_message(t('Unable to copy image "%image".',
          array('%image' => $file->filename)), 'error');
      }

      // If we made it this far it's safe to record this file in the database.
      $file->filepath = $dest .'/'. basename($file->filepath);
      $thumb = _node_images_create_thumbnail($file->filepath);
      $file->uid = $user->uid;
      $file->nid = $node->nid;
      $file->timestamp = time();
      $file->filesize = filesize($file->filepath);
      $file->thumbpath = $thumb->filepath;
      $file->thumbsize = $thumb->filesize;
      $file->status = 1;
      drupal_write_record('node_images', $file);
    }
    else {
      file_delete($file->filepath);
      db_query('DELETE FROM {files} WHERE fid = %d', $fid);

      // Remove it from the session in the case of new uploads,
      // that you want to disassociate before node submission.
      unset($_SESSION['node_images'][$fid]);
    }
  }

  // Empty the session storage after save. We use this variable to track files
  // that haven't been related to the node yet.
  unset($_SESSION['node_images']);
}

/**
 * Menu-callback for JavaScript-based uploads.
 */
function _node_images_js() {
  global $user;
  $output = '';

  // Load the form from the Form API cache.
  $cache = cache_get('form_'. $_POST['form_build_id'], 'cache_form');
  $form = $cache->data;
  $form_state = array('values' => $_POST);

  $node = (object)$_POST;
  $type = (isset($cache->data['#node'])? $cache->data['#node']->type : NULL);
  
  if ($type && $_POST['form_id'] == $type.'_node_form') {
    // upload from node creation page 

    $node->type = $type;
    $node->uid = $user->uid;

    // Handle new uploads, and merge tmp files into node_images.
    node_images_node_form_submit($form, $form_state);
    if (!empty($form_state['values']['node_images'])) {
      foreach ($form_state['values']['node_images'] as $fid => $file) {
        if (is_numeric($fid)) {
          $node->node_images[$fid] = $file;
          if (0 && !isset($file['filepath'])) {
            $node->node_images[$fid] = $node_files[$fid];
          }
        }
      }
    }

    $form = _node_images_attach_form($form_state, $node);

    // Update the default values changed in the $_POST array.
    $files = isset($_POST['node_images']) ? $_POST['node_images'] : array();
    foreach ($files as $fid => $file) {
      if (is_numeric($fid)) {
        $form['node_images'][$fid]['description']['#default_value'] = $file['description'];
        $form['node_images'][$fid]['list']['#default_value'] = isset($file['list']) ? 1 : 0;
        $form['node_images'][$fid]['remove']['#default_value'] = isset($file['remove']) ? 1 : 0;
        $form['node_images'][$fid]['weight']['#default_value'] = $file['weight'];
        $form['node_images'][$fid]['filemime']['#value'] = $file['filemime'];
      }
    }
  }
  elseif ($nid = $_POST['nid']) {  
    // upload from node images page
    if ($node = node_load($nid)) {
      $form = array();
      $file = _node_images_upload_submit($form, $form_state, $node);
      $form = _node_images_edit_form($form_state, $node);
    }
  }

  // Add the new element to the stored form state and resave.
  $cache->data['node_images']['wrapper'] = array_merge($cache->data['node_images']['wrapper'], $form);
  cache_set('form_'. $_POST['form_build_id'], $cache->data, 'cache_form', $cache->expire);

  // Render the form for output.
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
    '#tree' => FALSE,
    '#parents' => array(),
  );
  drupal_alter('form', $form, array(), 'node_images_js');

  $form_state = array('submitted' => FALSE, 'values' => $_POST);
  $form = form_builder('_node_images_js', $form, $form_state);
  $form['#sorted'] = TRUE;

  $output .= theme('status_messages') . drupal_render($form);

  // We send the updated node images form.
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit();
}

/**
 * Upload a new image and associate it to the current node.
 *
 * @param $form
 *   The form structure.
 * @param $form_state
 *   An associative array containing the current state of the form.
 * @param $node
 *   A node object to associate with uploaded image.
 * @return
 *    the uploaded image file, or FALSE if upload fails
 */
function _node_images_upload_submit($form, &$form_state, $node = NULL) {
  global $user;

  if (!$node && is_numeric(arg(1))) {
    $node = node_load(arg(1));
  }
  else {
  }
  if (!$node || !isset($node->nid)) {
    drupal_set_message(t('Node not valid.'), 'error');
  }

  if (!_node_images_access('create', $node)) {
    drupal_set_message(t('You are not allowed to upload node images.'), 'error');
    return FALSE;
  }

  if ($file = _node_images_file_upload($form, $form_state, $node)) {
    $description = $form_state['values']['description'];
    if (trim($description) == '') {
      $parts = pathinfo($file->filename);
      $description = (isset($parts['filename']) ? $parts['filename'] : substr($file->filename, 0, strrpos($file->filename, '.')));
    }
    $thumb = _node_images_create_thumbnail($file->filepath);

    // If we made it this far it's safe to record this file in the database.
    $file->uid = $user->uid;
    $file->nid = $node->nid;
    $file->timestamp = time();
    $file->thumbpath = $thumb->filepath;
    $file->thumbsize = $thumb->filesize;
    $file->description = $description;
    $file->status = 1;
    $file->weight = $form_state['values']['weight'];
    $file->list = (isset($form_state['values']['list']) ? $form_state['values']['list'] : 1);

    $result = drupal_write_record('node_images', $file);
    if ($result == SAVED_NEW) {
      drupal_set_message(t('The image has been successfully uploaded.'));
    }
    return $file;
  }

  return FALSE;
}


/************************************************************
 * Theme functions
 ************************************************************/

/**
 * Theme the list of attached images.
 *
 * @ingroup themeable
 */
function theme_node_images_attach_list(&$form) {
  $header = array('', t('Delete'), t('List'), t('Thumbnail'), t('Description'), t('Weight'), t('Size'));
  drupal_add_tabledrag('node_images_attach_list', 'order', 'sibling', 'node_images-weight');

  foreach (element_children($form) as $key) {
    if (!$form[$key]['thumbnail']) continue;

    // Add class to group weight fields for drag and drop.
    $form[$key]['weight']['#attributes']['class'] = 'node_images-weight';

    $row = array('');
    $row[] = drupal_render($form[$key]['delete']);
    $row[] = drupal_render($form[$key]['list']);
    $row[] = drupal_render($form[$key]['thumbnail']);
    $row[] = array('data' => drupal_render($form[$key]['description']), 'width' => '100%');
    $row[] = drupal_render($form[$key]['weight']);
    $row[] = array('data' => drupal_render($form[$key]['filesize']), 'class' => 'nowrap');
    $rows[] = array('data' => $row, 'class' => 'draggable');
  }

  $output = '';
  if (!empty($rows)) $output .= theme('table', $header, $rows, array('id' => 'node_images_attach_list'));
  $output .= drupal_render($form);
  return $output;
}

/**
 * Show node images in the node view.
 */
function theme_node_images_view($node, $teaser, $page, $block = FALSE, $count = NULL, $format = NULL) {
  if (arg(2) == 'image_gallery' || empty($node->node_images)) return;

  $output = '';
  $i = 0;

  // set maximum number of images for teaser/body
  $view = ($teaser ? 'teaser' : 'body');
  if (!$count) {
    $count = variable_get('node_images_'.$view.'_images_'.$node->type, 2);
  }
  if (isset($count) && $count == '0') return;

  // set image format
  if (!$format) {
    $format = variable_get('node_images_'.$view.'_format_'.$node->type, 'thumbs');
  }

  foreach((array)$node->node_images as $id => $image) {
    $description = check_plain($image->description);
    $pattern = '<img src="%path" alt="%description" />';
    $thumb = strtr($pattern, array('%path'=>file_create_url($image->thumbpath), '%description'=>$description));
    $fullsize = strtr($pattern, array('%path'=>file_create_url($image->filepath), '%description'=>$description));

    if ($info = @getimagesize($image->filepath)) {
      $width = $info[0] + 36;
      $height = $info[1] + 36;
    }
    else {
      $width = 420;
      $height = 315;
    }

    if ($format == 'thumbs') {
      $output .= '<a href="javascript:void(0);" title="'.$description.'" onclick="window.open(\''.
        file_create_url($image->filepath).'\', \'\', \'height='.$height.',width='.$width.'\');">'.$thumb.'</a> ';
    }
    else {
      $output .= $fullsize.' ';
    }
    if ($count>0 && ++$i >= $count) break;
  }

  if ($block && $count < count($node->node_images)) {
    $output .= '<div class="node_images_block_link">'.l(t('View all images'), 'node/'.$node->nid.'/image_gallery').'</div>';
  }

  return $output;
}


/************************************************************
 * Helper functions - other
 ************************************************************/

function node_images_load($node, $teaser = 0, $page = 0) {
  // show images only on teaser and page views
  if ($teaser === FALSE && $page === FALSE) return;

  // load node images for the current node
  $nid = ($node->tnid && $node->tnid != $node->nid ? $node->tnid : $node->nid);
  $images = array();
  $where = 'WHERE nid=%d';
  if ($teaser || $page) $where .= ' AND status=1 AND list=1';
  $sql = db_query('SELECT * FROM {node_images} ' .$where. ' ORDER BY weight', $nid);
  while ($r = db_fetch_object($sql)) {
    $images[$r->id] = $r;
  }
  return $images;
}

/**
 * Check access to add, edit or delete node images.
 */
function _node_images_access($op, $node, $file = NULL) {
  global $user;

  $type = node_get_types('type', $node);
  if (!isset($type->type)) return FALSE;

  $type = strtolower($type->type);
  if ($op == 'create') {
    return (user_access('add node images to any '. $type .' content') || (user_access('add node images to own '. $type .' content') && ($user->uid == $node->uid)) || user_access('edit any node image'));
  }
  if ($op == 'update') {
    return (user_access('edit any node image') || (user_access('edit own node images') && ($user->uid == $file->uid)));
  }
  if ($op == 'delete') {
    return (user_access('delete any node image') || (user_access('delete own node images') && ($user->uid == $file->uid)));
  }

  return FALSE;
}

/**
 * Checks if the upload.module is enabled, and the existence of an image toolkit.
 *
 * @param $form_element
 *   The form element containing the name of the directory to check.
 */
function _node_images_check_settings() {
  // Make sure we've got a working toolkit
  if (!image_get_toolkit()) {
    drupal_set_message(t('Make sure you have a working image toolkit installed and enabled, for more information see: %settings', array('%settings' => l(t('the settings page'), 'admin/settings/image-toolkit'))), 'error');
  }
}

/**
 * Checks the existence of the destination directory.
 * The directory can be specified either in $form_element (when called from the admin settings)
 * or in $path (when called from the node images edit page).
 *
 * @param $form_element
 *   The form element containing the name of the directory to check.
 */
function _node_images_check_directory($form_element = NULL, $u = NULL, $node = NULL) {
  $dir = (isset($form_element['#value']) ? $form_element['#value'] : '');
  $path = _node_images_get_directory($dir, $u, $node);
  $form_item = isset($form_element['#parents'][0]) ? $form_element['#parents'][0] : NULL;
  $result = _node_images_mkdir_recursive($path, FILE_CREATE_DIRECTORY, $form_element['#parents'][0]);
  if ($form_element) return $form_element;
  return $result;
}

function _node_images_mkdir_recursive($path, $mode, $form_item) {
  if (file_check_directory($path, $mode, $form_item)) return TRUE;

  $folders = explode('/', $path);
  $dirs = array();
  foreach ($folders as $folder) {
    $dirs[] = $folder;
    $dir = implode('/', $dirs);
    if (!file_check_directory($dir, $mode, $form_item)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Return the destination directory.
 */
function _node_images_get_directory($dir = '', $u = NULL, $node = NULL) {
  global $user;

  if (!$u) $u = $user;
  $variables = array('%uid' => $u->uid, '%username' => $u->name);
  $variables['%nid'] = (isset($node->nid) ? $node->nid : 0);
  $variables['%type'] = ($node ? $node->type: 'node');
  $path = file_directory_path().'/';
  $path .= ($dir ? trim($dir, '/') : variable_get('node_images_path', 'node_images'));
  return strtr($path, $variables);
}

/**
 * Validate, apply md5 and normalize filename.
 *
 * @param $file
 *   A Drupal file object.
 * @return
 *   An array. If the file name is not valid, it will contain an error message.
 */
function _node_images_file_validate_name(&$file) {
  $errors = array();

  if (variable_get('node_images_md5name', FALSE)) {
    $parts = pathinfo($file->destination);
    $file->destination = $parts['dirname'].'/'.substr(md5($dest.'/'.$file->filepath), 0, 16).'.'.$parts['extension'];
  }
  $file->filepath = preg_replace(array('/[ \']+/', '/["]+/'), array('_', ''), $file->filepath);

  if (strlen($file->filename) > 255) {
    $errors[] = t('Its name exceeds the 255 characters limit. Please rename the file and try again.');
  }
  return $errors;
}

/**
 * Create the thumbnail for the uploaded image.
 */
function _node_images_create_thumbnail($source, $suffix = '_tn') {
  $size = variable_get('node_images_thumb_resolution', '100x100');
  list($width, $height) = explode('x', $size);
  $dest = preg_replace('!(\.[^/.]+?)?$!', "$suffix\\1", $source, 1);
    
  if ($size = @getimagesize($source)) {
    if (!image_scale($source, $dest, $width, $height)) {
      file_copy($source, $dest, FILE_EXISTS_REPLACE);
    }
    $info = image_get_info($dest);
    $thumb = new stdClass();
    $thumb->filename = basename($dest);
    $thumb->filepath = $dest;
    $thumb->filesize = $info['file_size'];
    $thumb->filemime = $info['mime_type'];
    return $thumb;
  }
  return NULL;
}

/**
 * Determine the limitations on files that a given user may upload. The user
 * may be in multiple roles so we select the most permissive limitations from
 * all of their roles.
 *
 * @param $user
 *   A Drupal user object.
 * @return
 *   An associative array with the following keys:
 *     'extensions'
 *       A white space separated string containing the allowed extensions.
 *     'file_size'
 *       The maximum size of a file upload in bytes.
 *     'resolution'
 *       A string specifying the maximum resolution of images.
 */
function _node_images_file_limits($user) {
  return array(
    'extensions' => variable_get('node_images_extensions', 'jpg jpeg gif png'),
    'file_size' => variable_get('node_images_file_limit', 1) * 1024 * 1024,
    'resolution' => variable_get('node_images_large_resolution', 0),
  );
}

function _node_images_is_translation_source($node) {
  global $language;
  if ($node->tnid) return $node->nid == $node->tnid;
 
  if (module_exists('i18n')) {
    $current = i18n_get_lang();
    $default = i18n_default_language();
    return $current == $default;
  }
 
  return ($language->language == language_default('language'));
 
  $lang = ($node->language ? $node->language : language_default('language')); 
  return $lang == $language->language;
}

function _node_images_build_i18nstrings_context($file) {
  return 'node_images:node_image:'.$file->id.':description';
}

function _node_images_translate(&$file, $update = FALSE) {
  global $language;

  //$current_language = $language->language;
  //$default_language = language_default('language');
  $context = _node_images_build_i18nstrings_context($file);
  if (module_exists('i18nstrings') && function_exists('tt')) {
    $file->description = tt($context, $file->description, NULL, $update);
  }  
}

/**
* Implementation of hook_views_api().
* @return Array with Views API version.
*/
function node_images_views_api() {
   return array(
     'api' => 2,
     'path' => drupal_get_path('module', 'node_images') .'/views',
   );
}
