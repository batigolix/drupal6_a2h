<?php

// ********
// Settings
// ********
function tinytinymce_admin() {
	$form = array();
	$form['tinytinymce_simple'] = array(
		'#type' => 'textarea',
		'#title' => t('TinyMCE init script for simple mode'),
		'#default_value' => variable_get('tinytinymce_simple', tinytinymce_simple()),
		'#description' => t('The initialisation parameters for Tiny MCE - this will be applied to users who have been granted the "use tinymce simple" permission.'),
		'#required' => TRUE,
	);
	$form['tinytinymce_advanced'] = array(
		'#type' => 'textarea',
		'#title' => t('TinyMCE init script for advanced mode'),
		'#default_value' => variable_get('tinytinymce_advanced', tinytinymce_advanced()),
		'#description' => t('The initialisation parameters for Tiny MCE - this will be applied to users who have been granted the "use tinymce advanced" permission.'),
		'#required' => TRUE,
	);
	$form['tinytinymce_width'] = array(
		'#type' => 'textfield',
		'#title' => t('Width of text area'),
		'#default_value' => variable_get('tinytinymce_width', '100%'),
		'#description' => t('The width of the TinyMCE editing area.  This can be any valid CSS width, eg 100%, 400px etc.  Leave blank to use the TinyMCE default (which is a fixed width set by the editor).  This setting applies to the TinyMCE advanced theme only.'),
	);
	$form['tinytinymce_exclude'] = array(
		'#type' => 'textarea',
		'#title' => t('Exclude these text areas'),
		'#default_value' => variable_get('tinytinymce_exclude', tinytinymce_exclude()),
		'#description' => t('TinyTinyMCE automatically enables the rich text editor for all text areas.  This field should contain the comma-separated IDs of text areas for which rich text editing will not be possible, eg id1, id2, id3....  For more powerful matching, such as wildcards, you can alternatively enter a regular expression - the regular expression MUST begin and end with / as the delimiter character, eg "/^id1$|^id2$|xx/", any white space after the regular expression will break it.'),
		'#required' => FALSE,
	);
	$form['tinytinymce_exclude_not'] = array(
		'#type' => 'checkbox',
		'#title' => t('Reverse the above'),
		'#default_value' => variable_get('tinytinymce_exclude_not', false),
		'#description' => t('If selected, reverses the effect of the above list.  I.e. the rich text editor will only be enabled for the textareas listed above.'),
		'#required' => FALSE,
	);
	$form['tinytinymce_off'] = array(
		'#type' => 'textarea',
		'#title' => t('Switch off these text areas'),
		'#default_value' => variable_get('tinytinymce_off', ''),
		'#description' => t('TinyTinyMCE automatically turns on the rich text editor for all enabled text areas (unless they are in admin screens, where the default is off).  This field should contain the comma-separated IDs of text areas for which rich text editing is initially turned off but can be turned on by the user. As with the excluded areas above, you can alternatively enter a regular expression, begining with /.'),
		'#required' => FALSE,
	);
	$form['tinytinymce_off_not'] = array(
		'#type' => 'checkbox',
		'#title' => t('Reverse the above'),
		'#default_value' => variable_get('tinytinymce_off_not', false),
		'#description' => t('If selected, reverses the effect of the above list.  I.e. the rich text editor will only be switched on for the textareas listed above.  Note: textareas in admin screens will always be switched off by default.'),
		'#required' => FALSE,
	);
    $form['tinytinymce_ddb'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable Drupal teaser break function'),
      '#default_value' => variable_get('tinytinymce_ddb', TRUE),
      '#description' => t('By default, Drupal inserts javascript into your pages which allow you to split the body text into teaser and main body - this interferes with TinyMCE. TinyTinyMCE gives you an alternative way of splitting the page (the page break button) so we need to disable the Drupal functionality.  However, you might want to turn this feature off if, for instance, you are not using TinyTinyMCE for the edit-body element.'),
   );
    $form['tinytinymce_show_id'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show textarea IDs'),
      '#default_value' => variable_get('tinytinymce_show_id', FALSE),
      '#description' => t('Use this during development of your site - when this feature is turned on the ID of the textarea will be displayed - this will help you identify textarea IDs for use in the include/exclude sections.'),
   );

  return system_settings_form($form);
}

/**
* Implementation of hook_help
*/
function tinytinymce_help($path = '', $arg = '') {
   switch ($path) {
      case 'admin/settings/tinytinymce':
         return t('<p>This screen lets you configure the tinytinymce interface.  For this interface to work:</p>
         <ul>
            <li>The TinyMCE scripts, which are not included in this module (download from http://tinymce.moxiecode.com), need to be installed in a subdirectory of this module.  So, for instance, if this module is installed at .../sites/all/modules/tinytinymce, there should be a subdirectory of this called tinymce, which should contain the jscripts folder - so the main TinyMCE script should be located at .../sites/all/modules/tinytinymce/tinymce/jscripts/tiny_mce/tiny_mce.js.</li>
            <li>Use admin/user/permissions to grant the necessary permissions to your users. "use tinytinymce advanced" gives the user access to fully featured editing facilities, "use tinytinymce simple" gives the user a more basic set of controls.</li>
         </ul>
         <p>The user will see a link under each textarea called "rich text editor" - clicking this link will toggle the editor on of off.</p>
         <p>In addition, you can configure the initialisation scripts for simple and advanced mode to turn specific features on or off.  See http://wiki.moxiecode.com/examples/tinymce/installation_example_00.php for many examples of how to configure TinyMCE.</p>
         <ul>
            <li>A specific feature, which may be useful is setting which textareas are toggled to use TinyMCE by default - this is determined in the "elements" declaration, which is a comma-separated list of the IDs of textareas for which TinyMCE should be turned on (by default the body of a node is turned on).  So you could change this to:- elements: "edit-body, my-field-id, my-other-field-id"</li>
            <li>To turn TinyMCE on for all texareas (not recommended), use:- mode: "textarea"</li>
         </ul>
         <p>You can also disable the "rich text editor" toggle for specific text areas by entering their IDs into the Exclude box</p>'
         );
   }
}

/**
* Implementation of hook_menu
*/
function tinytinymce_menu () {
	return array(
		'admin/settings/tinytinymce' => array(
			'title' => 'Tiny Tiny MCE administration',
			'description' => 'Settings for the Tiny Tiny MCE module',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('tinytinymce_admin'),
			'access arguments' => array('administer tinytinymce'),
			'type' => MENU_NORMAL_ITEM,
		),
   );}

/**
* Implementation of hook_perm
*/
function tinytinymce_perm () {
	return array(
		'administer tinytinymce',
		'use tinytinymce advanced',
		'use tinytinymce simple',
	);
}

/**
* Implementation of hook_theme
* Needed to modify textarea output
*/
function tinytinymce_theme() {
   return array(
      'textarea' => array(
         'function' => 'tinytinymce_theme_textarea',
      )
   );
}

/**
* Modify textarea output
*/
function tinytinymce_theme_textarea($value) {
static $js_added = false;
static $imce;

   // is IMCE present?
   if (!isset($imce)) {
      $imce = function_exists('imce_access') && imce_access();
   }
  
   $out = theme_textarea($value);
   
   // Is this one of the excluded textareas, specified in module settings
   $id = $value['#id'];
   $exclude = trim(variable_get('tinytinymce_exclude', tinytinymce_exclude()));
   if (!preg_match('/^\//', $exclude)) {
      // search listof ids
      $exclude = ',,'.str_replace(' ','', $exclude).',';
      $excluded = strpos($exclude, ','.$id.',');
   } else {
      // or test regular expression
      $excluded = preg_match($exclude, $id);
   }
   if (variable_get('tinytinymce_exclude_not', false)) {
      $excluded = !$excluded;
   };
   
   // is the textarea to be enabled but turned off
   $off = trim(variable_get('tinytinymce_off', ''));
   $off_not = variable_get('tinytinymce_off_not', false);
   if (arg(0) == 'admin') {
      // turn off in admin screens
      $off = true;
   } else if (!preg_match('/^\//', $off)) {
      // search list of ids
      $off = ',,'.str_replace(' ','', $off).',';
      $off = strpos($off, ','.$id.',');
      if ($off_not) {$off = !$off;}
   } else {
      // or test regular expression
      $off = preg_match($off, $id);
      if ($off_not) {$off = !$off;}
   }
   
   // also exclude any php code
   if (preg_match('/^\<\?php/', $value['#value'])) {$excluded = true;}
   // set up the mode mode and default init script
   if (!$excluded && (user_access('use tinytinymce advanced') === true )) {
      $mode = 'advanced';
      $defscript = tinytinymce_advanced();
   } elseif (!$excluded && (user_access('use tinytinymce simple') === true )) {
      $mode = 'simple';
      $defscript = tinytinymce_simple();
   } else {
      $mode = '';
   }
   
   // if editor is turned off and this id is in the elements declaration
   
   // modify the text area for simple or advanced
   if ($mode != '') {
      if (!$js_added) {
         // add the TinyMCE script
         $path = drupal_get_path('module', 'tinytinymce');
         drupal_add_js($path.'/tinymce/jscripts/tiny_mce/tiny_mce.js', 'module', 'header', false, true, false);
         // tinymce init script - remove link to IMCE if not present
         $ttma = variable_get('tinytinymce_'.$mode, $defscript);
         if (!$imce) {$ttma = str_replace('file_browser_callback: "imceImageBrowser",', '', $ttma);}
         // do we have the pagebreak function
         if (strpos($ttma, 'pagebreak')) {
            $pbrk = ' ('.t('Use the Page Break button to insert a Drupal teaser break').')';
         } else {
            $pbrk = '';
         }
         // add the tinytinymce scripts
         drupal_add_js(
            $ttma. 
            (($mode =='advanced') ? tinytinymce_resize() : ''). 
            tinytinymce_toggle(). 
            tinytinymce_init_other(), 'inline', 'header');
         if ($imce) {tinytinymce_imce();}
         $js_added = true;
      }
      $pos = strrpos($out, '</div>');
      $out = substr($out, 0, $pos).'<div class="toggletinymce"><a href="javascript:toggletinyMCE(\''.$id.'\')">'.t('rich text editor').'</a>'.$pbrk.' </div></div>';
      // turn the toggle on
      if (!$off) {
         $js = 'toggletinyMCE("'.$id.'");';
         drupal_add_js($js, 'inline', 'footer');
      }
   }
   
   // are IDs turned on?
   if (variable_get('tinytinymce_show_id', FALSE)) {
      $out = '<div style="border: solid 1px #0000FF;">TEXTAREA ID: '.$id.'</div>'.$out;
   }
   
   return $out;
}

/**
* Default value for simple init
*/
function tinytinymce_simple() {
   $width = variable_get('tinytinymce_width', '100%');
   return '
tinyMCE.init({
   mode : "exact",
   init_instance_callback : "resizeEditorBox",
   theme : "simple"});
   ';
}

/**
* Default value for advanced init
*/
function tinytinymce_advanced() {
   
   return 'tinyMCE.init({
   mode : "exact",
   file_browser_callback: "imceImageBrowser",
   init_instance_callback : "resizeEditorBox",
   theme : "advanced",
   convert_urls : false,
   plugins : "safari,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template",
   theme_advanced_buttons1 : "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,formatselect,fontselect,fontsizeselect, styleselect, | |,forecolor,backcolor, ",
   theme_advanced_buttons2 : "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,preview,fullscreen,",
   theme_advanced_buttons3 : "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,",
   theme_advanced_buttons4 : ",styleprops,|,cite,del,ins,attribs,|,visualchars,nonbreaking,template,blockquote,pagebreak",
   theme_advanced_toolbar_location : "top",
   theme_advanced_toolbar_align : "left",
   theme_advanced_statusbar_location : "bottom",
   theme_advanced_resizing : true,
   extended_valid_elements : "a[name|href|target|title|onclick],img[style|class|src|border=0|alt|title|hspace|vspace|width|height|align|onmouseover|onmouseout|name],hr[class|width|size|noshade],font[face|size|color|style],span[class|align|style]",
   template_external_list_url : "example_template_list.js",
   content_css: "/path/to/your/sites/stylesheet.css" // change this to suit your site - classes associated with divs (eg div.mystyle) will appear in the style dropdown
});
   ';
}

/**
* Function to resize editor
*/
function tinytinymce_resize() {
   $width = variable_get('tinytinymce_width', '100%');
   return '
function resizeEditorBox (editor) {
   '. ($width ? 'document.getElementById(editor.id + "_tbl").style.width = "'. $width. '";' : '') . '
}
   ';
}

/**
* Toggle script
*/
function tinytinymce_toggle() {
   
   if (user_access('use tinytinymce advanced') === true || user_access('use tinytinymce simple') === true) {
      return '
function toggletinyMCE(id) {
   if (!tinyMCE.getInstanceById(id)) {
      tinyMCE.execCommand(\'mceAddControl\', false, id);
   } else {
      tinyMCE.execCommand(\'mceRemoveControl\', false, id);
   }
}';
   } else {
      return '';
   }
}

/**
* Default value for exclude
*/
function tinytinymce_exclude() {
   return 'edit-teaser-js, edit-code, edit-log, edit-img_assist_pages, edit-caption, edit-pages, edit-access_pages, edit-user_mail_welcome_body, edit-user_mail_approval_body, edit-user_mail_pass_body, edit-synonyms, edit-description';
}

/**
* Additional initialisation actions
* - Disable the Drupal 6 teaser functionality
*/
function tinytinymce_init_other() {
   if (variable_get('tinytinymce_ddb', TRUE)) {
      return '

Drupal.behaviors.teaser = function() {};
      ';
   } else {
      return '';
   }
}

/**
* IMCE Integration
*
* Adds the scripts necessary for imce integration
*/
function tinytinymce_imce () {
drupal_add_js("
   function imceImageBrowser(fid, url, type, win) {win.open(Drupal.settings.basePath +'?q=imce&app=Editor|url@'+ fid, '', 'width=760,height=560,resizable=1');}", 'inline');
}
