<?php
// $Id: delegator.install,v 1.15 2009/05/06 00:48:52 merlinofchaos Exp $

/**
 * @file
 * Installation routines for delegator module.
 */

/**
 * Implementation of hook_schema().
 */
function delegator_schema() {
  // This should always point to our 'current' schema. This makes it relatively easy
  // to keep a record of schema as we make changes to it.
  return delegator_schema_1();
}

/**
 * Schema version 1 for Panels in D6.
 */
function delegator_schema_1() {
  $schema = array();

  $schema['delegator_handlers'] = array(
    'export' => array(
      'identifier' => 'handler',
      'api' => array(
        'owner' => 'delegator',
        'api' => 'delegator_default',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'did' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'no export' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique ID for this task handler. Used to identify it programmatically.',
      ),
      'task' => array(
        'type' => 'varchar',
        'length' => '64',
        'description' => 'ID of the task this handler is for.',
      ),
      'subtask' => array(
        'type' => 'varchar',
        'length' => '64',
        'description' => 'ID of the subtask this handler is for.',
        'not null' => TRUE,
        'default' => '',
      ),
      'handler' => array(
        'type' => 'varchar',
        'length' => '64',
        'description' => 'ID of the task handler being used.',
      ),
      'weight' => array(
        'type' => 'int',
        'description' => 'The order in which this handler appears. Lower numbers go first.',
      ),
      'conf' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Serialized configuration of the handler, if needed.',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('did'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  $schema['delegator_weights'] = array(
    'description' => 'Contains override weights for delegator handlers that are in code.',
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique ID for this task handler. Used to identify it programmatically.',
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'description' => 'The order in which this handler appears. Lower numbers go first.',
      ),
    ),
    'primary key' => array('name'),
    'indexes' => array(
      'weights' => array('name', 'weight'),
    ),
  );

  $schema['delegator_pages'] = array(
    'description' => 'Contains page subtasks for implementing pages with arbitrary tasks.',
    'export' => array(
      'identifier' => 'page',
      'api' => array(
        'owner' => 'delegator',
        'api' => 'delegator_default',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'no export' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique ID for this subtask. Used to identify it programmatically.',
      ),
      'task' => array(
        'type' => 'varchar',
        'length' => '64',
        'description' => 'What type of page this is, so that we can use the same mechanism for creating tighter UIs for targeted pages.',
        'default' => 'page',
      ),
      'admin_title' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Human readable title for this page subtask.',
      ),
      'path' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The menu path that will invoke this task.',
      ),
      'access' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Access configuration for this path.',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'multiple' => array(
        'type' => 'int',
        'size' => 'tiny',
        'description' => 'True if the UI is set up to allow multiple handlers per page.',
        'default' => 0,
      ),
      'menu' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Serialized configuration of Drupal menu visibility settings for this item.',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'arguments' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Configuration of arguments for this menu item.',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'conf' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'Serialized configuration of the page, if needed.',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('pid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function delegator_install() {
  drupal_install_schema('delegator');
  db_query("UPDATE {system} SET weight = 99 WHERE name = 'delegator'");
}

/**
 * Implementation of hook_uninstall().
 */
function delegator_uninstall() {
  drupal_uninstall_schema('delegator');
}

/**
 * Update delegator page to include a little more data.
 */
function delegator_update_6100() {
  $ret = array();
  $type = array(
    'type' => 'varchar',
    'length' => '255',
    'description' => 'What type of page this is, so that we can use the same mechanism for creating tighter UIs for targeted pages.',
    'initial' => 'custom',
  );
  $conf = array(
    'type' => 'text',
    'size' => 'big',
    'description' => 'Serialized configuration of the page, if needed.',
    'not null' => TRUE,
    'serialize' => TRUE,
    'initial' => serialize(array()),
  );
  db_add_field($ret, 'delegator_pages', 'type', $type);
  db_add_field($ret, 'delegator_pages', 'conf', $conf);

  return $ret;
}

/**
 * Change 'type' field to 'task'.
 */
function delegator_update_6101() {
  $ret = array();
  $task = array(
    'type' => 'varchar',
    'length' => '255',
    'description' => 'What type of page this is, so that we can use the same mechanism for creating tighter UIs for targeted pages.',
    'initial' => 'page',
  );

  db_drop_field($ret, 'delegator_pages', 'type');
  db_add_field($ret, 'delegator_pages', 'task', $task);

  return $ret;
}

function delegator_update_6102() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 99 WHERE name = 'delegator'");
  return $ret;
}
